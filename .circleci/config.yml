orbs:
  win: circleci/windows@2.4.0

executors:
  node:
    parameters:
      image:
        type: string
        default: "18.0.0"
      gatsby_major:
        type: string
        default: "5"
    docker:
      - image: cimg/node:<< parameters.image >>
    environment:
      GATSBY_CPU_COUNT: 2
      COMPILER_OPTIONS: GATSBY_MAJOR=<< parameters.gatsby_major >>
      NODE_NO_WARNINGS: 1

aliases:
  e2e-executor-env: &e2e-executor-env
    GATSBY_CPU_COUNT: 2
    VERBOSE: 1

  e2e-executor: &e2e-executor
    docker:
      - image: cypress/browsers:node18.6.0-chrome105-ff104
    environment:
      <<: *e2e-executor-env

  restore_cache: &restore_cache
    restore_cache:
      name: Restore node_modules cache
      keys:
        - yarn-cypress-cache-{{ checksum "yarn.lock" }}

  install_node_modules: &install_node_modules
    run:
      name: Install node modules
      command: yarn

  check_lockfile: &check_lockfile
    run:
      name: Check for dirty lockfile
      command: ./scripts/check-lockfile.sh || exit 1

  validate_renovate: &validate_renovate
    run:
      name: Validate renovate-config
      command: (node scripts/renovate-config-generator.js && (git status --porcelain renovate.json5 | grep "M renovate.json5")) && (echo "Please run \"node scripts/renovate-config-generator.js\" to update renovate.json5" && exit 1) || npx -p renovate@31.28.5 renovate-config-validator .

  persist_cache: &persist_cache
    save_cache:
      name: Save node modules cache
      key: yarn-cypress-cache-{{ checksum "yarn.lock" }}
      paths:
        - ~/.cache

  attach_to_bootstrap: &attach_to_bootstrap
    attach_workspace:
      at: ./

  ignore_master: &ignore_master
    filters:
      branches:
        ignore:
          - master

  ignore_docs: &ignore_docs
    filters:
      branches:
        ignore:
          - /docs.+/

  test_template: &test_template
    parallelism: 4
    parameters:
      npm_rebuild:
        type: boolean
        default: false
    steps:
      - checkout
      - run: ./scripts/assert-changed-files.sh "packages/*|.circleci/*"
      - <<: *attach_to_bootstrap
      - when:
          condition: << parameters.npm_rebuild >>
          steps:
            - run: npm rebuild
      - run:
          name: Step debug info
          command: |
            yarn list react
            yarn why lmdb-store
      - run:
          name: Run tests
          command: yarn jest --ci --runInBand  $(yarn -s jest --listTests | sed 's/\/home\/circleci\/project\///g' | circleci tests split)
          environment:
            NODE_OPTIONS: --max-old-space-size=2048
            GENERATE_JEST_REPORT: "true"
            JEST_JUNIT_OUTPUT_DIR: ./test-results/jest-node/
            JEST_JUNIT_OUTPUT_NAME: results.xml
            JEST_JUNIT_REPORT_TEST_SUITE_ERRORS: "true"
      - store_test_results:
          path: ./test-results/jest-node/

  e2e-test-workflow: &e2e-test-workflow
    filters:
      branches:
        ignore:
          - master
          - /docs.+/
    requires:
      - lint
      - typecheck
      - unit_tests_node18

commands:
  e2e-test:
    parameters:
      skip_file_change_test:
        type: boolean
        default: false
      trigger_pattern:
        type: string
        default: "packages/*|.circleci/*|scripts/e2e-test.sh"
      test_path:
        type: string
      test_command:
        type: string
        default: "yarn test"
      react_version:
        type: string
        default: ""
      slices:
        type: boolean
        default: true # allow disabling it later when setting up partial hydration tests
      pre_gatsby_dev_command:
        type: string
        default: ""
    steps:
      - checkout
      # In case of failure, add these steps again. Cache probably got deleted
      #- <<: *restore_cache
      #- <<: *install_node_modules
      #- <<: *persist_cache
      - unless:
          condition: << parameters.skip_file_change_test >>
          steps:
            - run: ./scripts/assert-changed-files.sh "<< parameters.trigger_pattern >>|<< parameters.test_path >>/*"

      - when:
          condition: << parameters.slices >>
          steps:
            - run: echo 'export GATSBY_SLICES="true"' >> "$BASH_ENV"

      - <<: *attach_to_bootstrap
      - when:
          condition:
            not:
              equal: ["", << parameters.react_version >>]
          steps:
            - run:
                name: Upgrade React to << parameters.react_version >>
                command: "REACT_VERSION=<< parameters.react_version >> TEST_PATH=<< parameters.test_path >> node ./scripts/upgrade-react"
      - run:
          name: Install gatsby-dev@next
          command: yarn global add gatsby-dev-cli@next --ignore-engines
      - run:
          name: Run tests (using defaults)
          command: ./scripts/e2e-test.sh "<< parameters.test_path >>" "<< parameters.test_command >>" "<< parameters.pre_gatsby_dev_command >>"

version: 2.1

jobs:
  bootstrap:
    executor: node
    steps:
      - checkout
      - run: ./scripts/assert-changed-files.sh "packages/*|(e2e|integration)-tests/*|.circleci/*|scripts/e2e-test.sh|yarn.lock"
      # python 2 is not built in and node-gyp needs it to build lmdb
      - run: sudo apt-get update && sudo apt-get install python -y
      - <<: *restore_cache
      - <<: *install_node_modules
      - <<: *check_lockfile
      - <<: *validate_renovate
      - <<: *persist_cache
      - run: yarn bootstrap -- concurrency=2
      # Persist the workspace again with all packages already built
      - persist_to_workspace:
          root: ./
          paths:
            - "packages/"
            - "node_modules/"

  lint:
    executor: node
    steps:
      - checkout
      # installation of dependencies takes a while because of the 100 packages we have inside the monorepo
      # Linting only needs the root packages, we remove the workspace and only install root packages
      - run:
          name: "remove workspaces from package.json"
          command: |
            sed -i ':a;N;$!ba;s/,\n\s*"workspaces":\s\[[^]]*]/,"workspaces":\["packages\/babel-preset-gatsby"\]/g' package.json
      - <<: *install_node_modules
      - run: yarn lint:code
      - run: yarn lint:other

  typecheck:
    executor: node
    steps:
      - checkout
      # We should always assert on master
      - run: ./scripts/assert-changed-files.sh "packages/*|.circleci/*|yarn.lock"
      - <<: *attach_to_bootstrap
      - run: yarn typecheck
      - run: yarn check-repo-fields

  unit_tests_node18:
    executor:
      name: node
      image: "18.2.0"
    <<: *test_template

  integration_tests_gatsby_source_wordpress:
    machine:
      image: "ubuntu-2204:2023.02.1"
    steps:
      - run:
          command: |
            echo 'export NVM_DIR="$HOME/.nvm"' >> $BASH_ENV
            echo '[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"' >> $BASH_ENV
            echo nvm install v18 >> $BASH_ENV
            echo nvm alias default v18 >> $BASH_ENV
      - run: |
          node -v
      - run: npm i -g yarn@1.22.11
      - e2e-test:
          test_path: integration-tests/gatsby-source-wordpress

  integration_tests_node_manifest:
    executor: node
    steps:
      - e2e-test:
          test_path: integration-tests/node-manifest

  integration_tests_long_term_caching:
    executor: node
    steps:
      - e2e-test:
          test_path: integration-tests/long-term-caching

  integration_tests_cache_resilience:
    executor: node
    steps:
      - e2e-test:
          test_path: integration-tests/cache-resilience

  integration_tests_gatsby_pipeline:
    executor: node
    steps:
      - e2e-test:
          test_path: integration-tests/gatsby-pipeline

  integration_tests_gatsby_cli:
    executor: node
    steps:
      - e2e-test:
          test_path: integration-tests/gatsby-cli
          trigger_pattern: packages/gatsby-cli/*|packages/gatsby/*|integration-tests/gatsby-cli/*|scripts/e2e-test.sh

  integration_tests_structured_logging:
    executor: node
    steps:
      - e2e-test:
          test_path: integration-tests/structured-logging

  integration_tests_artifacts:
    executor: node
    steps:
      - e2e-test:
          test_path: integration-tests/artifacts

  integration_tests_ssr:
    executor: node
    steps:
      - e2e-test:
          test_path: integration-tests/ssr

  integration_tests_images:
    executor: node
    steps:
      - e2e-test:
          test_path: integration-tests/images
          test_command: yarn build-and-test
      - store_artifacts:
          path: integration-tests/images/__diff_output__

  integration_tests_functions:
    executor: node
    steps:
      - e2e-test:
          test_path: integration-tests/functions
          test_command: yarn test

  integration_tests_head_function_export:
    executor: node
    steps:
      - e2e-test:
          test_path: integration-tests/head-function-export
          test_command: yarn test

  integration_tests_esm_in_gatsby_files:
    executor: node
    steps:
      - e2e-test:
          test_path: integration-tests/esm-in-gatsby-files
          test_command: yarn test

  integration_tests_lmdb_regeneration:
    executor: node
    steps:
      - e2e-test:
          test_path: integration-tests/lmdb-regeneration
          test_command: yarn test

  e2e_tests_path-prefix:
    <<: *e2e-executor
    steps:
      - run: echo 'export CYPRESS_RECORD_KEY="${CY_CLOUD_PATH_PREFIX}"' >> "$BASH_ENV"
      - e2e-test:
          test_path: e2e-tests/path-prefix

  e2e_tests_pnp:
    executor:
      name: node
      image: "18.12.0"
    steps:
      - checkout
      - run: ./scripts/assert-changed-files.sh "packages/*|.circleci/*"
      - <<: *attach_to_bootstrap
      - run:
          command: mkdir -p /tmp/e2e-tests/
          working_directory: ~/project
      - run:
          command: cp -r ./starters/default /tmp/e2e-tests/gatsby-pnp
          working_directory: ~/project
      - run: # default doesn't have API functions so let's get some of those
          command: cp -r ./e2e-tests/adapters/src/api /tmp/e2e-tests/gatsby-pnp/src/api
          working_directory: ~/project
      - run:
          command: touch yarn.lock
          working_directory: /tmp/e2e-tests/gatsby-pnp
      - run: # Quick upgrade to the v2 (any version, we just need the real set version)
          command: yarn policies set-version berry
          working_directory: /tmp/e2e-tests/gatsby-pnp
      - run: # Explicitly set nodeLinker to avoid Yarn selecting node_modules due to the Yarn 1.x lockfile
          command: yarn config set nodeLinker pnp
          working_directory: /tmp/e2e-tests/gatsby-pnp
      - run: # Allow installs to change the lockfile
          command: yarn config set enableImmutableInstalls false
          working_directory: /tmp/e2e-tests/gatsby-pnp
      - run: # Don't allow any fallback to root dependencies
          command: yarn config set pnpFallbackMode none
          working_directory: /tmp/e2e-tests/gatsby-pnp
      - run: # Install before custom registry server is set
          command: yarn add start-server-and-test@^1.11.0
          working_directory: /tmp/e2e-tests/gatsby-pnp
      - run: # Set the local registry to gatsby-dev-cli registry
          command: yarn config set npmRegistryServer http://localhost:4873
          working_directory: /tmp/e2e-tests/gatsby-pnp
      - run: # Allow localhost registry
          command: |
            echo -e 'unsafeHttpWhitelist:\n  - "localhost"' >> .yarnrc.yml
          working_directory: /tmp/e2e-tests/gatsby-pnp
      - run: # Set project dir
          command: node ~/project/packages/gatsby-dev-cli/dist/index.js --set-path-to-repo ~/project
          working_directory: /tmp/e2e-tests/gatsby-pnp
      - run: # Copy over packages
          command: node ~/project/packages/gatsby-dev-cli/dist/index.js --force-install --scan-once --external-registry
          working_directory: /tmp/e2e-tests/gatsby-pnp
      - run:
          command: yarn build
          working_directory: /tmp/e2e-tests/gatsby-pnp
      - run:
          command: 'DEBUG=start-server-and-test yarn start-server-and-test "yarn develop 2>&1 | tee log.txt" :8000 "! cat log.txt | grep -E ''ERROR #|Require stack:''"'
          working_directory: /tmp/e2e-tests/gatsby-pnp

  e2e_tests_pnpm:
    executor:
      name: node
      image: "18.12.0"
    steps:
      - checkout
      - run: ./scripts/assert-changed-files.sh "packages/*|.circleci/*"
      - <<: *attach_to_bootstrap
      - run:
          command: mkdir -p /tmp/e2e-tests/
          working_directory: ~/project
      - run:
          command: cp -r ./starters/default /tmp/e2e-tests/gatsby-pnpm
          working_directory: ~/project
      - run: # default doesn't have API functions so let's get some of those
          command: cp -r ./e2e-tests/adapters/src/api /tmp/e2e-tests/gatsby-pnpm/src/api
          working_directory: ~/project
      - run:
          command: rm package-lock.json
          working_directory: /tmp/e2e-tests/gatsby-pnpm
      - run: # Install pnpm
          command: npm install -g pnpm
          working_directory: /tmp/e2e-tests/gatsby-pnpm
      - run: # Install start-server-and-test
          command: npm install -g start-server-and-test@^1.11.0
          working_directory: /tmp/e2e-tests/gatsby-pnpm
      - run: # Set project dir
          command: node ~/project/packages/gatsby-dev-cli/dist/index.js --set-path-to-repo ~/project
          working_directory: /tmp/e2e-tests/gatsby-pnpm
      - run: # Copy over packages
          command: node ~/project/packages/gatsby-dev-cli/dist/index.js --force-install --scan-once --package-manager pnpm
          working_directory: /tmp/e2e-tests/gatsby-pnpm
      - run:
          command: pnpm build
          working_directory: /tmp/e2e-tests/gatsby-pnpm
      - run:
          command: 'DEBUG=start-server-and-test pnpm start-server-and-test "pnpm develop 2>&1 | tee log.txt" :8000 "! cat log.txt | grep -E ''ERROR #|Require stack:''"'
          working_directory: /tmp/e2e-tests/gatsby-pnpm

  e2e_tests_development_runtime_with_react_18:
    <<: *e2e-executor
    steps:
      - run: echo 'export CYPRESS_RECORD_KEY="${CY_CLOUD_DEV_RUNTIME_REACT_18}"' >> "$BASH_ENV"
      - e2e-test:
          test_path: e2e-tests/development-runtime

  e2e_tests_production_runtime_with_react_18:
    <<: *e2e-executor
    steps:
      - run: echo 'export CY_CLOUD_PROD_RUNTIME_OFFLINE_REACT_18="${CY_CLOUD_PROD_RUNTIME_OFFLINE_REACT_18}"' >> "$BASH_ENV"
      - run: echo 'export CY_CLOUD_PROD_RUNTIME_REACT_18="${CY_CLOUD_PROD_RUNTIME_REACT_18}"' >> "$BASH_ENV"
      - e2e-test:
          test_path: e2e-tests/production-runtime
          test_command: CYPRESS_PROJECT_ID=5k8zbj CYPRESS_RECORD_KEY=${CY_CLOUD_PROD_RUNTIME_REACT_18} yarn test && CYPRESS_PROJECT_ID=yvdct2 CYPRESS_RECORD_KEY=${CY_CLOUD_PROD_RUNTIME_OFFLINE_REACT_18} yarn test:offline

  themes_e2e_tests_development_runtime:
    <<: *e2e-executor
    steps:
      - run: echo 'export CYPRESS_RECORD_KEY="${CY_CLOUD_THEMES_DEV_RUNTIME}"' >> "$BASH_ENV"
      - e2e-test:
          test_path: e2e-tests/themes
          test_command: cd development-runtime; gatsby-dev --force-install --scan-once; yarn test

  themes_e2e_tests_production_runtime:
    <<: *e2e-executor
    steps:
      - run: echo 'export CYPRESS_RECORD_KEY="${CY_CLOUD_THEMES_PROD_RUNTIME}"' >> "$BASH_ENV"
      - e2e-test:
          test_path: e2e-tests/themes
          test_command: cd production-runtime; gatsby-dev --force-install --scan-once; yarn test

  e2e_tests_mdx:
    <<: *e2e-executor
    steps:
      - run: echo 'export CYPRESS_RECORD_KEY="${CY_CLOUD_MDX}"' >> "$BASH_ENV"
      - e2e-test:
          test_path: e2e-tests/mdx

  e2e_tests_visual-regression:
    <<: *e2e-executor
    steps:
      - run: echo 'export CYPRESS_RECORD_KEY="${CY_CLOUD_VISUAL_REGRESSION}"' >> "$BASH_ENV"
      - e2e-test:
          test_path: e2e-tests/visual-regression
      - store_artifacts:
          path: e2e-tests/visual-regression/__diff_output__
      - store_test_results:
          path: e2e-tests/visual-regression/cypress/results

  e2e_tests_contentful:
    <<: *e2e-executor
    steps:
      - run: echo 'export CYPRESS_RECORD_KEY="${CY_CLOUD_CONTENTFUL}"' >> "$BASH_ENV"
      - e2e-test:
          test_path: e2e-tests/contentful
      # we build a second time to see if warm/cached builds are successful
      - e2e-test:
          test_path: e2e-tests/contentful
          test_command: yarn build
      - store_artifacts:
          path: e2e-tests/contentful/__diff_output__
      - store_test_results:
          path: e2e-tests/contentful/cypress/results

  e2e_tests_trailing-slash:
    <<: *e2e-executor
    steps:
      - run: echo 'export CYPRESS_RECORD_KEY="${CY_CLOUD_TRAILING_SLASH}"' >> "$BASH_ENV"
      - e2e-test:
          test_path: e2e-tests/trailing-slash
      - store_test_results:
          path: e2e-tests/trailing-slash/cypress/results

  e2e_tests_adapters:
    <<: *e2e-executor
    docker:
      - image: cypress/browsers:node-18.20.3-chrome-125.0.6422.141-1-ff-126.0.1-edge-125.0.2535.85-1
    steps:
      - run: echo 'export CYPRESS_RECORD_KEY="${CY_CLOUD_ADAPTERS}"' >> "$BASH_ENV"
      - e2e-test:
          test_path: e2e-tests/adapters
      - store_test_results:
          path: e2e-tests/adapters/cypress/results

  e2e_tests_adapters_monorepo:
    <<: *e2e-executor
    docker:
      - image: cypress/browsers:node-18.20.3-chrome-125.0.6422.141-1-ff-126.0.1-edge-125.0.2535.85-1
    steps:
      - run: echo 'export CYPRESS_RECORD_KEY="${CY_CLOUD_ADAPTERS}"' >> "$BASH_ENV"
      - e2e-test:
          test_path: e2e-tests/adapters
          test_command: cd workspace; gatsby-dev --force-install --scan-once; cd ..; yarn test
          pre_gatsby_dev_command: ./make-monorepo.sh
      - store_test_results:
          path: e2e-tests/adapters/cypress/results

  starters_validate:
    executor: node
    steps:
      - checkout
      - run: ./scripts/assert-changed-files.sh "starters/*|.circleci/*"
      - run: sh ./scripts/validate-starters.sh "starters/*"

  starters_publish:
    executor: node
    steps:
      - checkout
      # jq is helpful for parsing json & python required for node-gyp to build lmdb
      - run: sudo apt-get update && sudo apt-get install jq python -y
      - <<: *restore_cache
      - <<: *install_node_modules
      - run: yarn markdown
      - run: git config --global user.name "GatsbyJS Bot"
      - run: git config --global user.email "core-team@gatsbyjs.com"
      - run: sh ./scripts/publish-starters.sh "starters/*"

  update_changelogs:
    executor: node
    steps:
      - checkout
      - run: sudo apt-get update && sudo apt-get install jq python -y
      - <<: *restore_cache
      - <<: *install_node_modules
      - run: git config --global user.name "GatsbyJS Bot"
      - run: git config --global user.email "core-team@gatsbyjs.com"
      - run: node scripts/gatsby-changelog-generator/update-and-open-pr.js

  windows_unit_tests:
    parallelism: 4
    executor:
      name: win/default
      shell: powershell.exe
    steps:
      - checkout
      - run:
          command: ./scripts/assert-changed-files.sh "packages/*|(e2e|integration)-tests/*|.circleci/*|scripts/e2e-test.sh|yarn.lock"
          shell: bash.exe
      # Restoring cache takes as long as installing node modules, so skipping
      # - restore_cache:
      #     keys:
      #       - yarn-packages-v2-{{ checksum "yarn.lock" }}
      #       - yarn-packages-v2-

      - <<: *attach_to_bootstrap
      - run:
          name: Install node 18.0.0 and yarn
          command: |
            nvm install 18.0.0
            nvm alias default 18.0.0
            nvm use 18.0.0
            choco install yarn -y
      - run:
          name: Rebuild packages for windows
          command: |
            Remove-Item -Recurse -Force -Path "node_modules/sharp/"
            yarn
      - run:
          name: Run tests
          command: yarn jest --ci --runInBand ((yarn jest --listTests) | Foreach-Object {$_ -replace '.*\\packages', 'packages'} | Foreach-Object {$_ -replace '\\', '/'} | circleci tests split)
          no_output_timeout: 15m
          environment:
            NODE_OPTIONS: --max-old-space-size=2048
            GENERATE_JEST_REPORT: "true"
            COMPILER_OPTIONS: GATSBY_MAJOR=5
            JEST_JUNIT_OUTPUT_DIR: ./test-results/jest-node/
            JEST_JUNIT_OUTPUT_NAME: results.xml
            JEST_JUNIT_REPORT_TEST_SUITE_ERRORS: "true"
      - store_test_results:
          path: ./test-results/jest-node/

  windows_adapters_smoke:
    executor:
      name: win/default
      shell: bash.exe
    steps:
      - checkout
      - run:
          command: ./scripts/assert-changed-files.sh "packages/*|(e2e|integration)-tests/*|.circleci/*|scripts/e2e-test.sh|yarn.lock"
      - <<: *attach_to_bootstrap
      - run:
          name: Install node 18.19.0, yarn and netlify-cli
          command: |
            nvm install 18.19.0
            nvm alias default 18.19.0
            nvm use 18.19.0
            npm install -g yarn netlify-cli
      - run:
          name: Clear out sharp
          command: |
            Remove-Item -Recurse -Force -Path "node_modules/sharp/"
          shell: powershell.exe
      - run:
          command: yarn
      - run:
          command: mkdir -p /tmp/e2e-tests/
      - run:
          command: cp -r ./e2e-tests/adapters /tmp/e2e-tests/adapters
      - run:
          command: pwd && ls
          working_directory: /tmp/e2e-tests/adapters
      - run: # Set project dir
          command: node ./packages/gatsby-dev-cli/dist/index.js --set-path-to-repo .
      - run: # Copy over packages
          command: cd /tmp/e2e-tests/adapters && node ~/project/packages/gatsby-dev-cli/dist/index.js --force-install --scan-once
      - run: # run smoke test
          command: cd /tmp/e2e-tests/adapters && node scripts/deploy-and-run/netlify.mjs test:smoke

workflows:
  version: 2

  # Ideally, we should trigger this when any new release is created, sadly there is no easy way to do it:
  # - Can't rely on tags: GitHub won't send webhook to CircleCI when there are more than 3 tags in one push
  #   See: https://docs.github.com/en/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#push
  # - Can't rely on pushes to "release/*" branches because we have "Only build pull requests" option enabled
  #   (so pushes without pull requests are ignored by CircleCI)
  nightly-update-changelogs:
    triggers:
      - schedule:
          cron: "0 0 * * 1,2,3,4,5"
          filters:
            branches:
              only:
                - master
    jobs:
      - update_changelogs

  build-test:
    jobs:
      - bootstrap
      - lint
      - typecheck:
          requires:
            - bootstrap
      - windows_unit_tests:
          <<: *ignore_docs
          requires:
            - lint
            - bootstrap
      - windows_adapters_smoke:
          requires:
            # ideally we wait for windows unit tests here, but because those are flaky
            # feedback loop would be not practical, so at least wait for linux unit tests
            # to resemble setup for more robust E2E tests
            - lint
            - bootstrap
            - unit_tests_node18
      - unit_tests_node18:
          <<: *ignore_docs
          requires:
            - lint
            - typecheck
            - bootstrap
      - integration_tests_gatsby_source_wordpress:
          <<: *e2e-test-workflow
      - integration_tests_node_manifest:
          <<: *e2e-test-workflow
      - integration_tests_long_term_caching:
          <<: *e2e-test-workflow
      - integration_tests_cache_resilience:
          <<: *e2e-test-workflow
      - integration_tests_gatsby_pipeline:
          <<: *e2e-test-workflow
      - integration_tests_structured_logging:
          <<: *e2e-test-workflow
      - integration_tests_artifacts:
          <<: *e2e-test-workflow
      - integration_tests_ssr:
          <<: *e2e-test-workflow
      - integration_tests_images:
          <<: *e2e-test-workflow
      - integration_tests_functions:
          <<: *e2e-test-workflow
      - integration_tests_head_function_export:
          <<: *e2e-test-workflow
      - integration_tests_esm_in_gatsby_files:
          <<: *e2e-test-workflow
      - integration_tests_lmdb_regeneration:
          <<: *e2e-test-workflow
      - integration_tests_gatsby_cli:
          requires:
            - bootstrap
      - e2e_tests_pnp:
          <<: *e2e-test-workflow
      - e2e_tests_pnpm:
          <<: *e2e-test-workflow
      - e2e_tests_path-prefix:
          <<: *e2e-test-workflow
      - e2e_tests_visual-regression:
          <<: *e2e-test-workflow
      - e2e_tests_contentful:
          <<: *e2e-test-workflow
      - e2e_tests_mdx:
          <<: *e2e-test-workflow
      - e2e_tests_trailing-slash:
          <<: *e2e-test-workflow
      - e2e_tests_adapters:
          <<: *e2e-test-workflow
      - e2e_tests_adapters_monorepo:
          <<: *e2e-test-workflow
      - e2e_tests_development_runtime_with_react_18:
          <<: *e2e-test-workflow
      - e2e_tests_production_runtime_with_react_18:
          <<: *e2e-test-workflow
      - themes_e2e_tests_production_runtime:
          <<: *e2e-test-workflow
      - themes_e2e_tests_development_runtime:
          <<: *e2e-test-workflow
      - starters_validate:
          <<: *ignore_master
      - starters_publish:
          filters:
            branches:
              only:
                - master
